//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34011
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using Symber.Web.Data;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Data;



/// <summary>
/// APDBDef 是一个自动生成的具有 Partial 修饰的类，用于定义 APTableDef 和 APRelationDef。你可以添加同名的 Partial 类来扩充功能。
/// </summary>
public partial class APDBDef : APDatabase {
    
    private static DepartmentTableDef _department;
    
    private static EmployeeTableDef _employee;
    
    private static APRelationDef _department_Employee;
    
    private static APDalProvider staticProvider = APDalProviderHelper.InstantiateProvider("DefaultAPDalProvider", "Symber.Web.Data.SqlAPDalProvider", "Data Source=(LocalDb)\\v11.0;Initial Catalog=aspnet-DemoInWebApplication;AttachDbF" +
            "ilename=|DataDirectory|\\aspnet-DemoInWebApplication.mdf;Integrated Security=SSPI" +
            "", "System.Data.SqlClient");
    
    private APDalDef.DepartmentDal _departmentDal;
    
    private APDalDef.EmployeeDal _employeeDal;
    
    public APDBDef() : 
            base(staticProvider) {
    }
    
    public APDBDef(string providerName) : 
            base(providerName) {
    }
    
    /// <summary>
    /// Departments of company TableDef
    /// </summary>
    public static DepartmentTableDef Department {
        get {
            if ((_department == null)) {
                _department = new DepartmentTableDef("Department");
            }
            return _department;
        }
    }
    
    /// <summary>
    /// Employees of company TableDef
    /// </summary>
    public static EmployeeTableDef Employee {
        get {
            if ((_employee == null)) {
                _employee = new EmployeeTableDef("Employee");
            }
            return _employee;
        }
    }
    
    /// <summary>
    /// Relationship of Department and Employee with field DepartmentId. RelationDef
    /// </summary>
    public static APRelationDef Department_Employee {
        get {
            if ((_department_Employee == null)) {
                _department_Employee = new APRelationDef("Department", "DepartmentId", "Employee", "DepartmentId");
            }
            return _department_Employee;
        }
    }
    
    /// <summary>
    /// Departments of company Dal
    /// </summary>
    public virtual APDalDef.DepartmentDal DepartmentDal {
        get {
            if ((_departmentDal == null)) {
                _departmentDal = new APDalDef.DepartmentDal(this);
            }
            return _departmentDal;
        }
    }
    
    /// <summary>
    /// Employees of company Dal
    /// </summary>
    public virtual APDalDef.EmployeeDal EmployeeDal {
        get {
            if ((_employeeDal == null)) {
                _employeeDal = new APDalDef.EmployeeDal(this);
            }
            return _employeeDal;
        }
    }
    
    public override void Rollback() {
        base.Rollback();
    }
    
    public override void Close() {
        base.Close();
    }
    
    /// <summary>
    /// 初始化数据。
    /// </summary>
    public static void InitData() {
        APDBDef db = new APDBDef();
        db.BeginTrans();
        try {
            db.DepartmentDal.InitData(db);
            db.EmployeeDal.InitData(db);
            db.Commit();
        }
        catch (System.Exception ) {
            db.Rollback();
            throw;
        }
        finally {
            db.Close();
        }
    }
    
    [Serializable()]
    public partial class DepartmentTableDef : APTableDef {
        
        private Int32APColumnDef _departmentId;
        
        private Int32APColumnDef _parentId;
        
        private StringAPColumnDef _deptName;
        
        private StringAPColumnDef _phone;
        
        private static DepartmentTableDef _parent;
        
        public DepartmentTableDef(string tableName) : 
                base(tableName) {
        }
        
        protected DepartmentTableDef(string tableName, string alias) : 
                base(tableName, alias) {
        }
        
        /// <summary>
        /// DepartmentId ColumnDef
        /// </summary>
        public virtual Int32APColumnDef DepartmentId {
            get {
                if (Object.ReferenceEquals(_departmentId, null)) {
                    _departmentId = new Int32APColumnDef(this, "DepartmentId", false);
                    _departmentId.Display = "DepartmentId";
                }
                return _departmentId;
            }
        }
        
        /// <summary>
        /// ParentId ColumnDef
        /// </summary>
        public virtual Int32APColumnDef ParentId {
            get {
                if (Object.ReferenceEquals(_parentId, null)) {
                    _parentId = new Int32APColumnDef(this, "ParentId", false);
                    _parentId.Display = "ParentId";
                }
                return _parentId;
            }
        }
        
        /// <summary>
        /// DeptName ColumnDef
        /// </summary>
        public virtual StringAPColumnDef DeptName {
            get {
                if (Object.ReferenceEquals(_deptName, null)) {
                    _deptName = new StringAPColumnDef(this, "DeptName", false, 20);
                    _deptName.Display = "Department Name";
                }
                return _deptName;
            }
        }
        
        /// <summary>
        /// Phone ColumnDef
        /// </summary>
        public virtual StringAPColumnDef Phone {
            get {
                if (Object.ReferenceEquals(_phone, null)) {
                    _phone = new StringAPColumnDef(this, "Phone", false, 20);
                    _phone.Display = "Phone";
                }
                return _phone;
            }
        }
        
        /// <summary>
        /// Default Index
        /// </summary>
        public virtual APSqlOrderPhrase DefaultOrder {
            get {
                return null;
            }
        }
        
        /// <summary>
        /// Alias table Parent
        /// </summary>
        public virtual DepartmentTableDef Parent {
            get {
                if ((_parent == null)) {
                    _parent = As("Parent");
                }
                return _parent;
            }
        }
        
        /// <summary>
        /// Create a alias table
        /// </summary>
        public virtual DepartmentTableDef As(string name) {
            return new DepartmentTableDef("Department", name);
        }
        
        /// <summary>
        /// 填充数据。
        /// </summary>
        public virtual void Fullup(IDataReader reader, Department data, bool throwIfValidColumnName) {
            data.DepartmentId = DepartmentId.GetValue<int>(reader, throwIfValidColumnName);
            data.ParentId = ParentId.GetValue<int>(reader, throwIfValidColumnName);
            data.DeptName = DeptName.GetValue<string>(reader, throwIfValidColumnName);
            data.Phone = Phone.GetValue<string>(reader, throwIfValidColumnName);
        }
        
        /// <summary>
        /// 填充数据。
        /// </summary>
        public virtual Department Map(IDataReader reader) {
            Department data = new Department();
            Fullup(reader, data, true);
            return data;
        }
        
        /// <summary>
        /// 填充数据。
        /// </summary>
        public virtual Department TolerantMap(IDataReader reader) {
            Department data = new Department();
            Fullup(reader, data, false);
            return data;
        }
        
        /// <summary>
        /// 填充数据。
        /// </summary>
        public virtual List<Department> MapList(IDataReader reader) {
            List<Department> list = new List<Department>();
            try {
                for (; reader.Read(); ) {
                    list.Add(Map(reader));
                }
            }
            finally {
                reader.Close();
            }
            return list;
        }
        
        /// <summary>
        /// 填充数据。
        /// </summary>
        public virtual List<Department> TolerantMapList(IDataReader reader) {
            List<Department> list = new List<Department>();
            try {
                for (; reader.Read(); ) {
                    list.Add(TolerantMap(reader));
                }
            }
            finally {
                reader.Close();
            }
            return list;
        }
    }
    
    [Serializable()]
    public partial class EmployeeTableDef : APTableDef {
        
        private Int32APColumnDef _employeeId;
        
        private Int32APColumnDef _departmentId;
        
        private StringAPColumnDef _name;
        
        private DateTimeAPColumnDef _birthday;
        
        private StringAPColumnDef _email;
        
        public EmployeeTableDef(string tableName) : 
                base(tableName) {
        }
        
        protected EmployeeTableDef(string tableName, string alias) : 
                base(tableName, alias) {
        }
        
        /// <summary>
        /// EmployeeId ColumnDef
        /// </summary>
        public virtual Int32APColumnDef EmployeeId {
            get {
                if (Object.ReferenceEquals(_employeeId, null)) {
                    _employeeId = new Int32APColumnDef(this, "EmployeeId", false);
                    _employeeId.Display = "EmployeeId";
                }
                return _employeeId;
            }
        }
        
        /// <summary>
        /// DepartmentId ColumnDef
        /// </summary>
        public virtual Int32APColumnDef DepartmentId {
            get {
                if (Object.ReferenceEquals(_departmentId, null)) {
                    _departmentId = new Int32APColumnDef(this, "DepartmentId", false);
                    _departmentId.Display = "DepartmentId";
                }
                return _departmentId;
            }
        }
        
        /// <summary>
        /// Name ColumnDef
        /// </summary>
        public virtual StringAPColumnDef Name {
            get {
                if (Object.ReferenceEquals(_name, null)) {
                    _name = new StringAPColumnDef(this, "Name", false, 30);
                    _name.Display = "Name";
                }
                return _name;
            }
        }
        
        /// <summary>
        /// Birthday ColumnDef
        /// </summary>
        public virtual DateTimeAPColumnDef Birthday {
            get {
                if (Object.ReferenceEquals(_birthday, null)) {
                    _birthday = new DateTimeAPColumnDef(this, "Birthday", false);
                    _birthday.Display = "Birthday";
                }
                return _birthday;
            }
        }
        
        /// <summary>
        /// Email ColumnDef
        /// </summary>
        public virtual StringAPColumnDef Email {
            get {
                if (Object.ReferenceEquals(_email, null)) {
                    _email = new StringAPColumnDef(this, "Email", false, 255);
                    _email.Display = "Email";
                }
                return _email;
            }
        }
        
        /// <summary>
        /// IX_Employee_Name OrderByDef
        /// </summary>
        public virtual APSqlOrderPhrase IX_Employee_Name {
            get {
                return new APSqlOrderByClause(Name.Asc).Next;
            }
        }
        
        /// <summary>
        /// Default Index
        /// </summary>
        public virtual APSqlOrderPhrase DefaultOrder {
            get {
                return IX_Employee_Name;
            }
        }
        
        /// <summary>
        /// Create a alias table
        /// </summary>
        public virtual EmployeeTableDef As(string name) {
            return new EmployeeTableDef("Employee", name);
        }
        
        /// <summary>
        /// 填充数据。
        /// </summary>
        public virtual void Fullup(IDataReader reader, Employee data, bool throwIfValidColumnName) {
            data.EmployeeId = EmployeeId.GetValue<int>(reader, throwIfValidColumnName);
            data.DepartmentId = DepartmentId.GetValue<int>(reader, throwIfValidColumnName);
            data.Name = Name.GetValue<string>(reader, throwIfValidColumnName);
            data.Birthday = Birthday.GetValue<System.DateTime>(reader, throwIfValidColumnName);
            data.Email = Email.GetValue<string>(reader, throwIfValidColumnName);
        }
        
        /// <summary>
        /// 填充数据。
        /// </summary>
        public virtual Employee Map(IDataReader reader) {
            Employee data = new Employee();
            Fullup(reader, data, true);
            return data;
        }
        
        /// <summary>
        /// 填充数据。
        /// </summary>
        public virtual Employee TolerantMap(IDataReader reader) {
            Employee data = new Employee();
            Fullup(reader, data, false);
            return data;
        }
        
        /// <summary>
        /// 填充数据。
        /// </summary>
        public virtual List<Employee> MapList(IDataReader reader) {
            List<Employee> list = new List<Employee>();
            try {
                for (; reader.Read(); ) {
                    list.Add(Map(reader));
                }
            }
            finally {
                reader.Close();
            }
            return list;
        }
        
        /// <summary>
        /// 填充数据。
        /// </summary>
        public virtual List<Employee> TolerantMapList(IDataReader reader) {
            List<Employee> list = new List<Employee>();
            try {
                for (; reader.Read(); ) {
                    list.Add(TolerantMap(reader));
                }
            }
            finally {
                reader.Close();
            }
            return list;
        }
    }
}

/// <summary>
/// APDBDef 是一个自动生成的具有 Partial 修饰的类，用于定义所有 从 APDal 继承来的 Dal 类。你可以添加同名的 Partial 类来扩充功能。
/// </summary>
public partial class APDalDef {
    
    /// <summary>
    /// Departments of company DalBase
    /// </summary>
    public partial class DepartmentDalBase : APDal {
        
        public DepartmentDalBase() {
        }
        
        public DepartmentDalBase(APDatabase db) : 
                base(db) {
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert(Department data) {
            if ((data.DepartmentId == 0)) {
                data.DepartmentId = ((int)(GetNewId(APDBDef.Department.DepartmentId)));
            }
            var query = APQuery.insert(APDBDef.Department).values(APDBDef.Department.DepartmentId.SetValue(data.DepartmentId), APDBDef.Department.ParentId.SetValue(data.ParentId), APDBDef.Department.DeptName.SetValue(data.DeptName), APDBDef.Department.Phone.SetValue(data.Phone));
            ExecuteNonQuery(query);
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update(Department data) {
            var query = APQuery.update(APDBDef.Department).values(APDBDef.Department.ParentId.SetValue(data.ParentId), APDBDef.Department.DeptName.SetValue(data.DeptName), APDBDef.Department.Phone.SetValue(data.Phone)).where((APDBDef.Department.DepartmentId == data.DepartmentId));
            ExecuteNonQuery(query);
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void UpdatePartial(int departmentId, Object metadata) {
            var query = APQuery.update(APDBDef.Department).values(APSqlSetPhraseSelector.Select(APDBDef.Department, metadata)).where((APDBDef.Department.DepartmentId == departmentId));
            ExecuteNonQuery(query);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public virtual void PrimaryDelete(int departmentId) {
            var query = APQuery.delete(APDBDef.Department).where((APDBDef.Department.DepartmentId == departmentId));
            ExecuteNonQuery(query);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public virtual void ConditionDelete(APSqlWherePhrase condition) {
            var query = APQuery.delete(APDBDef.Department).where(condition);
            ExecuteNonQuery(query);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
            var query = APQuery.select(APDBDef.Department.Asterisk.Count()).from(APDBDef.Department).where(condition);
            return ExecuteCount(query);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public virtual Department PrimaryGet(int departmentId) {
            var query = APQuery.select(APDBDef.Department.Asterisk).from(APDBDef.Department).where((APDBDef.Department.DepartmentId == departmentId));
            IDataReader reader = ExecuteReader(query);
            try {
                if (reader.Read()) {
                    return APDBDef.Department.Map(reader);
                }
                return null;
            }
            finally {
                reader.Close();
            }
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public virtual List<Department> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
            var query = APQuery.select(APDBDef.Department.Asterisk).from(APDBDef.Department);
            if ((condition != null)) {
                query.where(condition);
            }
            if ((orderBy != null)) {
                query.order_by(orderBy);
            }
            if ((take != null)) {
                query.take(take);
            }
            if ((skip != null)) {
                query.skip(skip);
            }
            query.primary(APDBDef.Department.DepartmentId);
            IDataReader reader = ExecuteReader(query);
            return APDBDef.Department.MapList(reader);
        }
        
        /// <summary>
        /// 获得表的初始化数据。
        /// </summary>
        public virtual List<Department> GetInitData() {
            return new List<Department>();
        }
        
        /// <summary>
        /// 初始化数据。
        /// </summary>
        public virtual void InitData(APDBDef db) {
            List<Department> list = GetInitData();
            for (int i = 0; (i < list.Count); i = (i + 1)) {
                Department data = list[i];
                if ((PrimaryGet(data.DepartmentId) == null)) {
                    Insert(data);
                }
            }
        }
    }
    
    /// <summary>
    /// Departments of company Dal
    /// </summary>
    public partial class DepartmentDal : DepartmentDalBase {
        
        public DepartmentDal() {
        }
        
        public DepartmentDal(APDatabase db) : 
                base(db) {
        }
    }
    
    /// <summary>
    /// Employees of company DalBase
    /// </summary>
    public partial class EmployeeDalBase : APDal {
        
        public EmployeeDalBase() {
        }
        
        public EmployeeDalBase(APDatabase db) : 
                base(db) {
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert(Employee data) {
            if ((data.EmployeeId == 0)) {
                data.EmployeeId = ((int)(GetNewId(APDBDef.Employee.EmployeeId)));
            }
            var query = APQuery.insert(APDBDef.Employee).values(APDBDef.Employee.EmployeeId.SetValue(data.EmployeeId), APDBDef.Employee.DepartmentId.SetValue(data.DepartmentId), APDBDef.Employee.Name.SetValue(data.Name), APDBDef.Employee.Birthday.SetValue(data.Birthday), APDBDef.Employee.Email.SetValue(data.Email));
            ExecuteNonQuery(query);
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update(Employee data) {
            var query = APQuery.update(APDBDef.Employee).values(APDBDef.Employee.DepartmentId.SetValue(data.DepartmentId), APDBDef.Employee.Name.SetValue(data.Name), APDBDef.Employee.Birthday.SetValue(data.Birthday), APDBDef.Employee.Email.SetValue(data.Email)).where((APDBDef.Employee.EmployeeId == data.EmployeeId));
            ExecuteNonQuery(query);
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void UpdatePartial(int employeeId, Object metadata) {
            var query = APQuery.update(APDBDef.Employee).values(APSqlSetPhraseSelector.Select(APDBDef.Employee, metadata)).where((APDBDef.Employee.EmployeeId == employeeId));
            ExecuteNonQuery(query);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public virtual void PrimaryDelete(int employeeId) {
            var query = APQuery.delete(APDBDef.Employee).where((APDBDef.Employee.EmployeeId == employeeId));
            ExecuteNonQuery(query);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public virtual void ConditionDelete(APSqlWherePhrase condition) {
            var query = APQuery.delete(APDBDef.Employee).where(condition);
            ExecuteNonQuery(query);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
            var query = APQuery.select(APDBDef.Employee.Asterisk.Count()).from(APDBDef.Employee).where(condition);
            return ExecuteCount(query);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public virtual Employee PrimaryGet(int employeeId) {
            var query = APQuery.select(APDBDef.Employee.Asterisk).from(APDBDef.Employee).where((APDBDef.Employee.EmployeeId == employeeId));
            IDataReader reader = ExecuteReader(query);
            try {
                if (reader.Read()) {
                    return APDBDef.Employee.Map(reader);
                }
                return null;
            }
            finally {
                reader.Close();
            }
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public virtual List<Employee> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
            var query = APQuery.select(APDBDef.Employee.Asterisk).from(APDBDef.Employee);
            if ((condition != null)) {
                query.where(condition);
            }
            if ((orderBy != null)) {
                query.order_by(orderBy);
            }
            if ((take != null)) {
                query.take(take);
            }
            if ((skip != null)) {
                query.skip(skip);
            }
            query.primary(APDBDef.Employee.EmployeeId);
            IDataReader reader = ExecuteReader(query);
            return APDBDef.Employee.MapList(reader);
        }
        
        /// <summary>
        /// 获得表的初始化数据。
        /// </summary>
        public virtual List<Employee> GetInitData() {
            return new List<Employee>();
        }
        
        /// <summary>
        /// 初始化数据。
        /// </summary>
        public virtual void InitData(APDBDef db) {
            List<Employee> list = GetInitData();
            for (int i = 0; (i < list.Count); i = (i + 1)) {
                Employee data = list[i];
                if ((PrimaryGet(data.EmployeeId) == null)) {
                    Insert(data);
                }
            }
        }
    }
    
    /// <summary>
    /// Employees of company Dal
    /// </summary>
    public partial class EmployeeDal : EmployeeDalBase {
        
        public EmployeeDal() {
        }
        
        public EmployeeDal(APDatabase db) : 
                base(db) {
        }
    }
}

/// <summary>
/// APBplDef 是一个自动生成的具有 Partial 修饰的类，用于定义所有的 Bpl 类。你可以 添加同名的 Partial 类来扩充功能。
/// </summary>
public partial class APBplDef {
    
    /// <summary>
    /// Departments of company BplBase
    /// </summary>
    public partial class DepartmentBplBase {
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public static void Insert(Department data) {
            APDBDef db = new APDBDef();
            try {
                db.DepartmentDal.Insert(data);
            }
            finally {
                db.Close();
            }
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void Update(Department data) {
            APDBDef db = new APDBDef();
            try {
                db.DepartmentDal.Update(data);
            }
            finally {
                db.Close();
            }
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(int departmentId, Object metadata) {
            APDBDef db = new APDBDef();
            try {
                db.DepartmentDal.UpdatePartial(departmentId, metadata);
            }
            finally {
                db.Close();
            }
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(int departmentId) {
            APDBDef db = new APDBDef();
            try {
                db.DepartmentDal.PrimaryDelete(departmentId);
            }
            finally {
                db.Close();
            }
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APDBDef db = new APDBDef();
            try {
                db.DepartmentDal.ConditionDelete(condition);
            }
            finally {
                db.Close();
            }
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            APDBDef db = new APDBDef();
            try {
                return db.DepartmentDal.ConditionQueryCount(condition);
            }
            finally {
                db.Close();
            }
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static Department PrimaryGet(int departmentId) {
            APDBDef db = new APDBDef();
            try {
                return db.DepartmentDal.PrimaryGet(departmentId);
            }
            finally {
                db.Close();
            }
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Department> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
            APDBDef db = new APDBDef();
            try {
                return db.DepartmentDal.ConditionQuery(condition, orderBy, take, skip);
            }
            finally {
                db.Close();
            }
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Department> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
            APDBDef db = new APDBDef();
            try {
                return db.DepartmentDal.ConditionQuery(condition, orderBy, take, null);
            }
            finally {
                db.Close();
            }
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Department> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            APDBDef db = new APDBDef();
            try {
                return db.DepartmentDal.ConditionQuery(condition, orderBy, null, null);
            }
            finally {
                db.Close();
            }
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<Department> GetAll() {
            return ConditionQuery(null, null);
        }
    }
    
    /// <summary>
    /// Departments of company Dal
    /// </summary>
    public partial class DepartmentBpl : DepartmentBplBase {
    }
    
    /// <summary>
    /// Employees of company BplBase
    /// </summary>
    public partial class EmployeeBplBase {
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public static void Insert(Employee data) {
            APDBDef db = new APDBDef();
            try {
                db.EmployeeDal.Insert(data);
            }
            finally {
                db.Close();
            }
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void Update(Employee data) {
            APDBDef db = new APDBDef();
            try {
                db.EmployeeDal.Update(data);
            }
            finally {
                db.Close();
            }
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(int employeeId, Object metadata) {
            APDBDef db = new APDBDef();
            try {
                db.EmployeeDal.UpdatePartial(employeeId, metadata);
            }
            finally {
                db.Close();
            }
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(int employeeId) {
            APDBDef db = new APDBDef();
            try {
                db.EmployeeDal.PrimaryDelete(employeeId);
            }
            finally {
                db.Close();
            }
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APDBDef db = new APDBDef();
            try {
                db.EmployeeDal.ConditionDelete(condition);
            }
            finally {
                db.Close();
            }
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            APDBDef db = new APDBDef();
            try {
                return db.EmployeeDal.ConditionQueryCount(condition);
            }
            finally {
                db.Close();
            }
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static Employee PrimaryGet(int employeeId) {
            APDBDef db = new APDBDef();
            try {
                return db.EmployeeDal.PrimaryGet(employeeId);
            }
            finally {
                db.Close();
            }
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Employee> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
            APDBDef db = new APDBDef();
            try {
                return db.EmployeeDal.ConditionQuery(condition, orderBy, take, skip);
            }
            finally {
                db.Close();
            }
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Employee> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
            APDBDef db = new APDBDef();
            try {
                return db.EmployeeDal.ConditionQuery(condition, orderBy, take, null);
            }
            finally {
                db.Close();
            }
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Employee> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            APDBDef db = new APDBDef();
            try {
                return db.EmployeeDal.ConditionQuery(condition, orderBy, null, null);
            }
            finally {
                db.Close();
            }
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<Employee> GetAll() {
            return ConditionQuery(null, null);
        }
    }
    
    /// <summary>
    /// Employees of company Dal
    /// </summary>
    public partial class EmployeeBpl : EmployeeBplBase {
    }
}

/// <summary>
/// Departments of company Base
/// </summary>
[Serializable()]
public abstract partial class DepartmentBase {
    
    /// <summary>
    /// DepartmentId
    /// </summary>
    private int _departmentId;
    
    /// <summary>
    /// Parent DepartmentId
    /// </summary>
    private int _parentId;
    
    /// <summary>
    /// DeptName
    /// </summary>
    private string _deptName = string.Empty;
    
    /// <summary>
    /// Phone
    /// </summary>
    private string _phone = string.Empty;
    
    /// <summary>
    /// 默认构造函数。
    /// </summary>
    public DepartmentBase() {
    }
    
    /// <summary>
    /// 初始化所有字段的构造函数。
    /// </summary>
    public DepartmentBase(int departmentId, int parentId, string deptName, string phone) {
        _departmentId = departmentId;
        _parentId = parentId;
        _deptName = deptName;
        _phone = phone;
    }
    
    /// <summary>
    /// DepartmentId
    /// </summary>
    public virtual int DepartmentId {
        get {
            return _departmentId;
        }
        set {
            _departmentId = value;
        }
    }
    
    /// <summary>
    /// DepartmentId APColumnDef
    /// </summary>
    public static Int32APColumnDef DepartmentIdDef {
        get {
            return APDBDef.Department.DepartmentId;
        }
    }
    
    /// <summary>
    /// Parent DepartmentId
    /// </summary>
    public virtual int ParentId {
        get {
            return _parentId;
        }
        set {
            _parentId = value;
        }
    }
    
    /// <summary>
    /// Parent DepartmentId APColumnDef
    /// </summary>
    public static Int32APColumnDef ParentIdDef {
        get {
            return APDBDef.Department.ParentId;
        }
    }
    
    /// <summary>
    /// DeptName
    /// </summary>
    [Display(Name="Department Name")]
    [StringLength(20)]
    public virtual string DeptName {
        get {
            return _deptName;
        }
        set {
            _deptName = value;
        }
    }
    
    /// <summary>
    /// DeptName APColumnDef
    /// </summary>
    public static StringAPColumnDef DeptNameDef {
        get {
            return APDBDef.Department.DeptName;
        }
    }
    
    /// <summary>
    /// Phone
    /// </summary>
    [StringLength(20)]
    public virtual string Phone {
        get {
            return _phone;
        }
        set {
            _phone = value;
        }
    }
    
    /// <summary>
    /// Phone APColumnDef
    /// </summary>
    public static StringAPColumnDef PhoneDef {
        get {
            return APDBDef.Department.Phone;
        }
    }
    
    /// <summary>
    /// DepartmentTableDef APTableDef
    /// </summary>
    public static APDBDef.DepartmentTableDef TableDef {
        get {
            return APDBDef.Department;
        }
    }
    
    /// <summary>
    /// DepartmentTableDef APSqlAsteriskExpr
    /// </summary>
    public static APSqlAsteriskExpr Asterisk {
        get {
            return APDBDef.Department.Asterisk;
        }
    }
    
    /// <summary>
    /// 赋值。
    /// </summary>
    public virtual void Assignment(Department data) {
        DepartmentId = data.DepartmentId;
        ParentId = data.ParentId;
        DeptName = data.DeptName;
        Phone = data.Phone;
    }
    
    /// <summary>
    /// 比较。
    /// </summary>
    public virtual bool CompareEquals(Department data) {
        if ((DepartmentId != data.DepartmentId)) {
            return false;
        }
        if ((ParentId != data.ParentId)) {
            return false;
        }
        if ((DeptName != data.DeptName)) {
            return false;
        }
        if ((Phone != data.Phone)) {
            return false;
        }
        return true;
    }
    
    /// <summary>
    /// 添加数据。
    /// </summary>
    public virtual void Insert() {
        APBplDef.DepartmentBpl.Insert(((Department)(this)));
    }
    
    /// <summary>
    /// 更新数据。
    /// </summary>
    public virtual void Update() {
        APBplDef.DepartmentBpl.Update(((Department)(this)));
    }
    
    /// <summary>
    /// 更新数据。
    /// </summary>
    public static void UpdatePartial(int departmentId, Object metadata) {
        APBplDef.DepartmentBpl.UpdatePartial(departmentId, metadata);
    }
    
    /// <summary>
    /// 删除数据。
    /// </summary>
    public static void PrimaryDelete(int departmentId) {
        APBplDef.DepartmentBpl.PrimaryDelete(departmentId);
    }
    
    /// <summary>
    /// 条件删除数据。
    /// </summary>
    public static void ConditionDelete(APSqlWherePhrase condition) {
        APBplDef.DepartmentBpl.ConditionDelete(condition);
    }
    
    /// <summary>
    /// 根据条件查询数量。
    /// </summary>
    public static int ConditionQueryCount(APSqlWherePhrase condition) {
        return APBplDef.DepartmentBpl.ConditionQueryCount(condition);
    }
    
    /// <summary>
    /// 根据主键获取数据。
    /// </summary>
    public static Department PrimaryGet(int departmentId) {
        return APBplDef.DepartmentBpl.PrimaryGet(departmentId);
    }
    
    /// <summary>
    /// 根据指定条件查询数据。
    /// </summary>
    public static List<Department> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
        return APBplDef.DepartmentBpl.ConditionQuery(condition, orderBy, take, skip);
    }
    
    /// <summary>
    /// 根据指定条件查询数据。
    /// </summary>
    public static List<Department> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
        return APBplDef.DepartmentBpl.ConditionQuery(condition, orderBy, take);
    }
    
    /// <summary>
    /// 根据指定条件查询数据。
    /// </summary>
    public static List<Department> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
        return APBplDef.DepartmentBpl.ConditionQuery(condition, orderBy);
    }
    
    /// <summary>
    /// 获取所有数据。
    /// </summary>
    public static List<Department> GetAll() {
        return APBplDef.DepartmentBpl.GetAll();
    }
}

/// <summary>
/// Departments of company
/// </summary>
[Serializable()]
public partial class Department : DepartmentBase {
    
    /// <summary>
    /// 默认构造函数。
    /// </summary>
    public Department() {
    }
    
    /// <summary>
    /// 初始化所有字段的构造函数。
    /// </summary>
    public Department(int departmentId, int parentId, string deptName, string phone) : 
            base(departmentId, parentId, deptName, phone) {
    }
}

/// <summary>
/// Employees of company Base
/// </summary>
[Serializable()]
public abstract partial class EmployeeBase {
    
    /// <summary>
    /// EmployeeId
    /// </summary>
    private int _employeeId;
    
    /// <summary>
    /// Employee's DeparentId
    /// </summary>
    private int _departmentId;
    
    /// <summary>
    /// Name
    /// </summary>
    private string _name = string.Empty;
    
    /// <summary>
    /// Birthday
    /// </summary>
    private System.DateTime _birthday;
    
    /// <summary>
    /// Email
    /// </summary>
    private string _email = string.Empty;
    
    /// <summary>
    /// 默认构造函数。
    /// </summary>
    public EmployeeBase() {
    }
    
    /// <summary>
    /// 初始化所有字段的构造函数。
    /// </summary>
    public EmployeeBase(int employeeId, int departmentId, string name, System.DateTime birthday, string email) {
        _employeeId = employeeId;
        _departmentId = departmentId;
        _name = name;
        _birthday = birthday;
        _email = email;
    }
    
    /// <summary>
    /// EmployeeId
    /// </summary>
    public virtual int EmployeeId {
        get {
            return _employeeId;
        }
        set {
            _employeeId = value;
        }
    }
    
    /// <summary>
    /// EmployeeId APColumnDef
    /// </summary>
    public static Int32APColumnDef EmployeeIdDef {
        get {
            return APDBDef.Employee.EmployeeId;
        }
    }
    
    /// <summary>
    /// Employee's DeparentId
    /// </summary>
    public virtual int DepartmentId {
        get {
            return _departmentId;
        }
        set {
            _departmentId = value;
        }
    }
    
    /// <summary>
    /// Employee's DeparentId APColumnDef
    /// </summary>
    public static Int32APColumnDef DepartmentIdDef {
        get {
            return APDBDef.Employee.DepartmentId;
        }
    }
    
    /// <summary>
    /// Name
    /// </summary>
    [StringLength(30)]
    public virtual string Name {
        get {
            return _name;
        }
        set {
            _name = value;
        }
    }
    
    /// <summary>
    /// Name APColumnDef
    /// </summary>
    public static StringAPColumnDef NameDef {
        get {
            return APDBDef.Employee.Name;
        }
    }
    
    /// <summary>
    /// Birthday
    /// </summary>
    public virtual System.DateTime Birthday {
        get {
            return _birthday;
        }
        set {
            _birthday = value;
        }
    }
    
    /// <summary>
    /// Birthday APColumnDef
    /// </summary>
    public static DateTimeAPColumnDef BirthdayDef {
        get {
            return APDBDef.Employee.Birthday;
        }
    }
    
    /// <summary>
    /// Email
    /// </summary>
    [StringLength(255)]
    public virtual string Email {
        get {
            return _email;
        }
        set {
            _email = value;
        }
    }
    
    /// <summary>
    /// Email APColumnDef
    /// </summary>
    public static StringAPColumnDef EmailDef {
        get {
            return APDBDef.Employee.Email;
        }
    }
    
    /// <summary>
    /// EmployeeTableDef APTableDef
    /// </summary>
    public static APDBDef.EmployeeTableDef TableDef {
        get {
            return APDBDef.Employee;
        }
    }
    
    /// <summary>
    /// EmployeeTableDef APSqlAsteriskExpr
    /// </summary>
    public static APSqlAsteriskExpr Asterisk {
        get {
            return APDBDef.Employee.Asterisk;
        }
    }
    
    /// <summary>
    /// 赋值。
    /// </summary>
    public virtual void Assignment(Employee data) {
        EmployeeId = data.EmployeeId;
        DepartmentId = data.DepartmentId;
        Name = data.Name;
        Birthday = data.Birthday;
        Email = data.Email;
    }
    
    /// <summary>
    /// 比较。
    /// </summary>
    public virtual bool CompareEquals(Employee data) {
        if ((EmployeeId != data.EmployeeId)) {
            return false;
        }
        if ((DepartmentId != data.DepartmentId)) {
            return false;
        }
        if ((Name != data.Name)) {
            return false;
        }
        if ((Birthday != data.Birthday)) {
            return false;
        }
        if ((Email != data.Email)) {
            return false;
        }
        return true;
    }
    
    /// <summary>
    /// 添加数据。
    /// </summary>
    public virtual void Insert() {
        APBplDef.EmployeeBpl.Insert(((Employee)(this)));
    }
    
    /// <summary>
    /// 更新数据。
    /// </summary>
    public virtual void Update() {
        APBplDef.EmployeeBpl.Update(((Employee)(this)));
    }
    
    /// <summary>
    /// 更新数据。
    /// </summary>
    public static void UpdatePartial(int employeeId, Object metadata) {
        APBplDef.EmployeeBpl.UpdatePartial(employeeId, metadata);
    }
    
    /// <summary>
    /// 删除数据。
    /// </summary>
    public static void PrimaryDelete(int employeeId) {
        APBplDef.EmployeeBpl.PrimaryDelete(employeeId);
    }
    
    /// <summary>
    /// 条件删除数据。
    /// </summary>
    public static void ConditionDelete(APSqlWherePhrase condition) {
        APBplDef.EmployeeBpl.ConditionDelete(condition);
    }
    
    /// <summary>
    /// 根据条件查询数量。
    /// </summary>
    public static int ConditionQueryCount(APSqlWherePhrase condition) {
        return APBplDef.EmployeeBpl.ConditionQueryCount(condition);
    }
    
    /// <summary>
    /// 根据主键获取数据。
    /// </summary>
    public static Employee PrimaryGet(int employeeId) {
        return APBplDef.EmployeeBpl.PrimaryGet(employeeId);
    }
    
    /// <summary>
    /// 根据指定条件查询数据。
    /// </summary>
    public static List<Employee> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
        return APBplDef.EmployeeBpl.ConditionQuery(condition, orderBy, take, skip);
    }
    
    /// <summary>
    /// 根据指定条件查询数据。
    /// </summary>
    public static List<Employee> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
        return APBplDef.EmployeeBpl.ConditionQuery(condition, orderBy, take);
    }
    
    /// <summary>
    /// 根据指定条件查询数据。
    /// </summary>
    public static List<Employee> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
        return APBplDef.EmployeeBpl.ConditionQuery(condition, orderBy);
    }
    
    /// <summary>
    /// 获取所有数据。
    /// </summary>
    public static List<Employee> GetAll() {
        return APBplDef.EmployeeBpl.GetAll();
    }
}

/// <summary>
/// Employees of company
/// </summary>
[Serializable()]
public partial class Employee : EmployeeBase {
    
    /// <summary>
    /// 默认构造函数。
    /// </summary>
    public Employee() {
    }
    
    /// <summary>
    /// 初始化所有字段的构造函数。
    /// </summary>
    public Employee(int employeeId, int departmentId, string name, System.DateTime birthday, string email) : 
            base(employeeId, departmentId, name, birthday, email) {
    }
}

/// <summary>
/// Demo Enum
/// </summary>
public enum DemoEnum {
    
    /// <summary>
    /// For Debug
    /// </summary>
    Debug,
    
    /// <summary>
    /// For Release
    /// </summary>
    Release,
}

/// <summary>
/// Demo Enum APEnumDictionary
/// </summary>
public partial class DemoEnumAPEnumDictionary {
    
    /// <summary>
    /// For Debug
    /// </summary>
    public const string DebugName = "Debug";
    
    /// <summary>
    /// For Release
    /// </summary>
    public const string ReleaseName = "Release";
    
    public static APEnumDictionary<DemoEnum> Dictionary = APEnumDictionary<DemoEnum>.Create(new KeyValuePair<DemoEnum, string>(DemoEnum.Debug, DebugName), new KeyValuePair<DemoEnum, string>(DemoEnum.Release, ReleaseName));
}
